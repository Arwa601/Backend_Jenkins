pipeline {
    agent any
    tools {
        maven 'Maven'
    }
    environment {
        DOCKER_COMPOSE_FILE = 'docker-compose.yml'
    }
    triggers {
        pollSCM '*/1 * * * *'
    }
    stages {
        stage('Check Java Version') {
            steps {
                sh 'java -version'
                echo 'Java version is checked'
            }
        }

        stage('Checkout') {
            steps {
                git credentialsId: '00445cc6-fdbd-4c9d-a46c-743ce3a67806', url: 'https://github.com/Arwa601/Backend_Jenkins', branch: 'main'
            }
        }
        stage("Sonarqube Analysis "){
                            steps{
                                withSonarQubeEnv('sonar-server') {
                                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Backend_Jenkins \
                                    -Dsonar.java.binaries=. \
                                    -Dsonar.projectKey=Backend_Jenkins '''
                                }
                            }
                        }
                        stage("quality gate"){
                            steps {
                                script {
                                  waitForQualityGate abortPipeline: false, credentialsId: 'SonarQubeToken'
                                }
                           }
         }


        stage('Build Docker Images') {
            steps {
                sh 'mvn clean package -DskipTests'
                sh 'docker compose build app dbmysql'
            }
        }

        stage('Run Services') {
            steps {
                sh 'docker compose -f ${DOCKER_COMPOSE_FILE} up --remove-orphans -d'
            }
        }
        stage('check containers') {
                    steps {
                        sh 'docker ps -a'
                    }
                }

        stage('Push to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin"
                    }

                    sh 'docker tag my_java17_app:latest arwa409/my_java17_app:latest'
                    sh 'docker tag mysql:latest arwa409/mysql:latest'

                    sh 'docker push arwa409/my_java17_app:latest'
                    sh 'docker push arwa409/mysql:latest'


                    sh 'docker logout'
                }
            }
        }
    }
}
